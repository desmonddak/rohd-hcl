// Copyright (C) 2025 Intel Corporation
// SPDX-License-Identifier: BSD-3-Clause
//
// cache_controller_interfaces.dart
// Interfaces for cache controller request/response patterns.
//
// 2025 January 10
// Author: Generated by Copilot

import 'package:rohd/rohd.dart';

/// A grouping of signals based on direction for cache controller interfaces.
enum CacheControllerDirection {
  /// Request signals (id, address)
  request,

  /// Response signals (id, address, data)
  response,
}

/// A request interface containing id and address for cache controller.
class CacheRequestInterface extends Interface<CacheControllerDirection> {
  /// The width of the ID field.
  final int idWidth;

  /// The width of the address field.
  final int addrWidth;

  /// The transaction ID.
  Logic get id => port('id');

  /// The address being requested.
  Logic get addr => port('addr');

  /// Valid signal for the request.
  Logic get valid => port('valid');

  /// Ready signal indicating the interface can accept new requests.
  Logic get ready => port('ready');

  /// Constructs a new cache request interface.
  CacheRequestInterface(this.idWidth, this.addrWidth) {
    setPorts([
      Logic.port('id', idWidth),
      Logic.port('addr', addrWidth),
      Logic.port('valid'),
    ], [
      CacheControllerDirection.request
    ]);

    setPorts([
      Logic.port('ready'),
    ], [
      CacheControllerDirection.response
    ]);
  }

  /// Makes a copy of this interface with matching configuration.
  @override
  CacheRequestInterface clone() => CacheRequestInterface(idWidth, addrWidth);
}

/// A response interface containing id, address, and data for cache controller.
class CacheResponseInterface extends Interface<CacheControllerDirection> {
  /// The width of the ID field.
  final int idWidth;

  /// The width of the address field.
  final int addrWidth;

  /// The width of the data field.
  final int dataWidth;

  /// The transaction ID.
  Logic get id => port('id');

  /// The address for this response.
  Logic get addr => port('addr');

  /// The data being returned.
  Logic get data => port('data');

  /// Valid signal for the response.
  Logic get valid => port('valid');

  /// Ready signal indicating the downstream can accept responses.
  Logic get ready => port('ready');

  /// Constructs a new cache response interface.
  CacheResponseInterface(this.idWidth, this.addrWidth, this.dataWidth) {
    setPorts([
      Logic.port('id', idWidth),
      Logic.port('addr', addrWidth),
      Logic.port('data', dataWidth),
      Logic.port('valid'),
    ], [
      CacheControllerDirection.response
    ]);

    setPorts([
      Logic.port('ready'),
    ], [
      CacheControllerDirection.request
    ]);
  }

  /// Makes a copy of this interface with matching configuration.
  @override
  CacheResponseInterface clone() =>
      CacheResponseInterface(idWidth, addrWidth, dataWidth);
}
